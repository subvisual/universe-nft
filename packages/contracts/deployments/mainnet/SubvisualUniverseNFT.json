{
  "address": "0x5738379364Fab26c7e044c02deD4ceef93333D84",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_newBaseURI",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_newURISuffix",
          "type": "string"
        },
        {
          "internalType": "uint16",
          "name": "_width",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_height",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "newBaseURI",
          "type": "string"
        }
      ],
      "name": "BaseURIUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "newURISuffix",
          "type": "string"
        }
      ],
      "name": "URISuffixUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MINT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "URISuffix",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "x",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "y",
          "type": "uint16"
        }
      ],
      "name": "coordsToId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "height",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "idToCoords",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "x",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "y",
          "type": "uint16"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "inBoundaries",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_sig",
          "type": "bytes"
        }
      ],
      "name": "recover",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_sig",
          "type": "bytes"
        }
      ],
      "name": "redeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "redeemFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_newBaseURI",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_newURISuffix",
          "type": "string"
        }
      ],
      "name": "setURISuffix",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "uri",
              "type": "string"
            }
          ],
          "internalType": "struct SubvisualUniverseNFT.Data",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "width",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x54341a36258bb6fa172f554976eb27b871b9577d5c25b81a60fa12d0722117e6",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xed11010139D5Ea6718086e55c9952332fc192311",
    "contractAddress": null,
    "transactionIndex": 275,
    "gasUsed": "1999846",
    "logsBloom": "0x
    "blockHash": "0x4c1ce2ae3482266762632c5f41bedf1696a55803f5785a44a752dfb97fc5a59c",
    "transactionHash": "0x54341a36258bb6fa172f554976eb27b871b9577d5c25b81a60fa12d0722117e6",
    "logs": [
      {
        "transactionIndex": 275,
        "blockNumber": 13965258,
        "transactionHash": "0x54341a36258bb6fa172f554976eb27b871b9577d5c25b81a60fa12d0722117e6",
        "address": "0x5738379364Fab26c7e044c02deD4ceef93333D84",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c"
        ],
        "data": "0x",
        "logIndex": 295,
        "blockHash": "0x4c1ce2ae3482266762632c5f41bedf1696a55803f5785a44a752dfb97fc5a59c"
      },
      {
        "transactionIndex": 275,
        "blockNumber": 13965258,
        "transactionHash": "0x54341a36258bb6fa172f554976eb27b871b9577d5c25b81a60fa12d0722117e6",
        "address": "0x5738379364Fab26c7e044c02deD4ceef93333D84",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x000000000000000000000000ed11010139d5ea6718086e55c9952332fc192311"
        ],
        "data": "0x",
        "logIndex": 296,
        "blockHash": "0x4c1ce2ae3482266762632c5f41bedf1696a55803f5785a44a752dfb97fc5a59c"
      },
      {
        "transactionIndex": 275,
        "blockNumber": 13965258,
        "transactionHash": "0x54341a36258bb6fa172f554976eb27b871b9577d5c25b81a60fa12d0722117e6",
        "address": "0x5738379364Fab26c7e044c02deD4ceef93333D84",
        "topics": [
          "0x6741b2fc379fad678116fe3d4d4b9a1a184ab53ba36b86ad0fa66340b1ab41ad"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002668747470733a2f2f686f6c69646179732e73756276697375616c2e636f6d2f6d696e7465642f0000000000000000000000000000000000000000000000000000",
        "logIndex": 297,
        "blockHash": "0x4c1ce2ae3482266762632c5f41bedf1696a55803f5785a44a752dfb97fc5a59c"
      },
      {
        "transactionIndex": 275,
        "blockNumber": 13965258,
        "transactionHash": "0x54341a36258bb6fa172f554976eb27b871b9577d5c25b81a60fa12d0722117e6",
        "address": "0x5738379364Fab26c7e044c02deD4ceef93333D84",
        "topics": [
          "0x80ee62268f37acfc25ec039b3bdc164eb560c675d21e677b7452e1f34a56897a"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000042e706e6700000000000000000000000000000000000000000000000000000000",
        "logIndex": 298,
        "blockHash": "0x4c1ce2ae3482266762632c5f41bedf1696a55803f5785a44a752dfb97fc5a59c"
      }
    ],
    "blockNumber": 13965258,
    "cumulativeGasUsed": "17563115",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Subvisual Universe NFT",
    "SV-UNI",
    "https://holidays.subvisual.com/minted/",
    ".png",
    255,
    255,
    "0xed11010139D5Ea6718086e55c9952332fc192311"
  ],
  "numDeployments": 1,
  "solcInputHash": "d0d89470465c562b2267e84d7cb93f19",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_newBaseURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_newURISuffix\",\"type\":\"string\"},{\"internalType\":\"uint16\",\"name\":\"_width\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_height\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newBaseURI\",\"type\":\"string\"}],\"name\":\"BaseURIUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newURISuffix\",\"type\":\"string\"}],\"name\":\"URISuffixUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MINT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"URISuffix\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"x\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"y\",\"type\":\"uint16\"}],\"name\":\"coordsToId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"height\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"idToCoords\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"x\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"y\",\"type\":\"uint16\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"inBoundaries\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_sig\",\"type\":\"bytes\"}],\"name\":\"recover\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_sig\",\"type\":\"bytes\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"redeemFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newBaseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newURISuffix\",\"type\":\"string\"}],\"name\":\"setURISuffix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"internalType\":\"struct SubvisualUniverseNFT.Data\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"width\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_name\":\"NFT name\",\"_newBaseURI\":\"base URI to use for assets\",\"_newURISuffix\":\"URI suffix to use for assets\",\"_symbol\":\"NFT symbol\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"redeem(uint256,bytes)\":{\"params\":{\"_sig\":\"EIP712 signature to validate\",\"_tokenId\":\"token ID to mint\"}},\"redeemFor(address,uint256)\":{\"params\":{\"_to\":\"Address of the recipient\",\"_tokenId\":\"token ID to mint\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setBaseURI(string)\":{\"params\":{\"_newBaseURI\":\"new base URI for the token\"}},\"setURISuffix(string)\":{\"params\":{\"_newURISuffix\":\"new URI suffix for the token\"}},\"tokenData(uint256)\":{\"params\":{\"tokenId\":\"the token ID\"},\"returns\":{\"_0\":\"token data\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"events\":{\"BaseURIUpdated(string)\":{\"notice\":\"Emitted when the base URI changes\"},\"URISuffixUpdated(string)\":{\"notice\":\"Emitted when the URI suffix changes\"}},\"kind\":\"user\",\"methods\":{\"URISuffix()\":{\"notice\":\"Suffix for the URI of all NFTs;\"},\"baseURI()\":{\"notice\":\"Base URI for all NFTs\"},\"redeem(uint256,bytes)\":{\"notice\":\"Mints a new NFT\"},\"redeemFor(address,uint256)\":{\"notice\":\"Mints a new NFT on behalf of an accountOnly callable by an approved operator\"},\"setBaseURI(string)\":{\"notice\":\"Updates the base URIOnly callable by an authorized operator\"},\"setURISuffix(string)\":{\"notice\":\"Updates the URI suffixOnly callable by an authorized operator\"},\"tokenData(uint256)\":{\"notice\":\"Returns info for a token based on his ID\"}},\"notice\":\"An NFT representing the Subvisual Universe\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SubvisualUniverseNFT.sol\":\"SubvisualUniverseNFT\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xe9e291de7ffe06e66503c6700b1bb84ff6e0989cbb974653628d8994e7c97f03\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n    address private immutable _CACHED_THIS;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _CACHED_THIS = address(this);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0x6688fad58b9ec0286d40fa957152e575d5d8bd4c3aa80985efdb11b44f776ae7\",\"license\":\"MIT\"},\"@rari-capital/solmate/src/tokens/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern, minimalist, and gas efficient ERC-721 implementation.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC721.sol)\\n/// @dev Note that balanceOf does not revert if passed the zero address, in defiance of the ERC.\\nabstract contract ERC721 {\\n    /*///////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 indexed id);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 indexed id);\\n\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                          METADATA STORAGE/LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    function tokenURI(uint256 id) public view virtual returns (string memory);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            ERC721 STORAGE                        \\n    //////////////////////////////////////////////////////////////*/\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(uint256 => address) public ownerOf;\\n\\n    mapping(uint256 => address) public getApproved;\\n\\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(string memory _name, string memory _symbol) {\\n        name = _name;\\n        symbol = _symbol;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC721 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 id) public virtual {\\n        address owner = ownerOf[id];\\n\\n        require(msg.sender == owner || isApprovedForAll[owner][msg.sender], \\\"NOT_AUTHORIZED\\\");\\n\\n        getApproved[id] = spender;\\n\\n        emit Approval(owner, spender, id);\\n    }\\n\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        isApprovedForAll[msg.sender][operator] = approved;\\n\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) public virtual {\\n        require(from == ownerOf[id], \\\"WRONG_FROM\\\");\\n\\n        require(to != address(0), \\\"INVALID_RECIPIENT\\\");\\n\\n        require(\\n            msg.sender == from || msg.sender == getApproved[id] || isApprovedForAll[from][msg.sender],\\n            \\\"NOT_AUTHORIZED\\\"\\n        );\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        unchecked {\\n            balanceOf[from]--;\\n\\n            balanceOf[to]++;\\n        }\\n\\n        ownerOf[id] = to;\\n\\n        delete getApproved[id];\\n\\n        emit Transfer(from, to, id);\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) public virtual {\\n        transferFrom(from, to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, \\\"\\\") ==\\n                ERC721TokenReceiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        bytes memory data\\n    ) public virtual {\\n        transferFrom(from, to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, data) ==\\n                ERC721TokenReceiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC165 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function supportsInterface(bytes4 interfaceId) public pure virtual returns (bool) {\\n        return\\n            interfaceId == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\\n            interfaceId == 0x80ac58cd || // ERC165 Interface ID for ERC721\\n            interfaceId == 0x5b5e139f; // ERC165 Interface ID for ERC721Metadata\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                       INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 id) internal virtual {\\n        require(to != address(0), \\\"INVALID_RECIPIENT\\\");\\n\\n        require(ownerOf[id] == address(0), \\\"ALREADY_MINTED\\\");\\n\\n        // Counter overflow is incredibly unrealistic.\\n        unchecked {\\n            balanceOf[to]++;\\n        }\\n\\n        ownerOf[id] = to;\\n\\n        emit Transfer(address(0), to, id);\\n    }\\n\\n    function _burn(uint256 id) internal virtual {\\n        address owner = ownerOf[id];\\n\\n        require(ownerOf[id] != address(0), \\\"NOT_MINTED\\\");\\n\\n        // Ownership check above ensures no underflow.\\n        unchecked {\\n            balanceOf[owner]--;\\n        }\\n\\n        delete ownerOf[id];\\n\\n        delete getApproved[id];\\n\\n        emit Transfer(owner, address(0), id);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                       INTERNAL SAFE MINT LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _safeMint(address to, uint256 id) internal virtual {\\n        _mint(to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, \\\"\\\") ==\\n                ERC721TokenReceiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function _safeMint(\\n        address to,\\n        uint256 id,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, data) ==\\n                ERC721TokenReceiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n}\\n\\n/// @notice A generic interface for a contract which properly accepts ERC721 tokens.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC721.sol)\\ninterface ERC721TokenReceiver {\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xf97378ab999188b3d5d97037fabbecbc726892c74cba6536899b852eb4756d6a\",\"license\":\"AGPL-3.0-only\"},\"contracts/SubvisualUniverseNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {ERC721} from \\\"@rari-capital/solmate/src/tokens/ERC721.sol\\\";\\nimport {ECDSA} from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport {EIP712} from \\\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\\\";\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * An NFT representing the Subvisual Universe\\n */\\ncontract SubvisualUniverseNFT is ERC721, Ownable, EIP712 {\\n    using Strings for uint16;\\n    using ECDSA for bytes32;\\n\\n    //\\n    // Constants\\n    //\\n\\n    // Mint approval EIP712 TypeHash\\n    bytes32 public constant MINT_TYPEHASH =\\n        keccak256(\\\"Mint(address account,uint256 tokenId)\\\");\\n\\n    //\\n    // Structs\\n    //\\n    struct Data {\\n        uint256 id;\\n        address owner;\\n        string uri;\\n    }\\n\\n    //\\n    // State\\n    //\\n\\n    /// Base URI for all NFTs\\n    string public baseURI;\\n\\n    /// Suffix for the URI of all NFTs;\\n    string public URISuffix;\\n\\n    uint16 public width;\\n    uint16 public height;\\n\\n    //\\n    // Events\\n    //\\n\\n    /// Emitted when the base URI changes\\n    event BaseURIUpdated(string newBaseURI);\\n\\n    /// Emitted when the URI suffix changes\\n    event URISuffixUpdated(string newURISuffix);\\n\\n    /**\\n     * @param _name NFT name\\n     * @param _symbol NFT symbol\\n     * @param _newBaseURI base URI to use for assets\\n     * @param _newURISuffix URI suffix to use for assets\\n     */\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        string memory _newBaseURI,\\n        string memory _newURISuffix,\\n        uint16 _width,\\n        uint16 _height,\\n        address _owner\\n    ) ERC721(_name, _symbol) EIP712(_name, \\\"1.0.0\\\") {\\n        _transferOwnership(_owner);\\n\\n        baseURI = _newBaseURI;\\n        URISuffix = _newURISuffix;\\n\\n        width = _width;\\n        height = _height;\\n\\n        emit BaseURIUpdated(_newBaseURI);\\n        emit URISuffixUpdated(_newURISuffix);\\n    }\\n\\n    //\\n    // Public API\\n    //\\n\\n    function coordsToId(uint16 x, uint16 y) external pure returns (uint256) {\\n        return (uint256(x) << 16) + uint256(y);\\n    }\\n\\n    function idToCoords(uint256 id) public pure returns (uint16 x, uint16 y) {\\n        x = uint16(id >> 16);\\n        y = uint16(id & ((2 << 16) - 1));\\n    }\\n\\n    /**\\n     * Returns info for a token based on his ID\\n     *\\n     * @param tokenId the token ID\\n     * @return token data\\n     */\\n    function tokenData(uint256 tokenId) external view returns (Data memory) {\\n        return _getTokenData(tokenId);\\n    }\\n\\n    /**\\n     * Updates the base URI\\n     *\\n     * @notice Only callable by an authorized operator\\n     *\\n     * @param _newBaseURI new base URI for the token\\n     */\\n    function setBaseURI(string memory _newBaseURI) public onlyOwner {\\n        baseURI = _newBaseURI;\\n\\n        emit BaseURIUpdated(_newBaseURI);\\n    }\\n\\n    /**\\n     * Updates the URI suffix\\n     *\\n     * @notice Only callable by an authorized operator\\n     *\\n     * @param _newURISuffix new URI suffix for the token\\n     */\\n    function setURISuffix(string memory _newURISuffix) public onlyOwner {\\n        URISuffix = _newURISuffix;\\n\\n        emit URISuffixUpdated(_newURISuffix);\\n    }\\n\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        override(ERC721)\\n        returns (string memory)\\n    {\\n        (uint16 x, uint16 y) = idToCoords(tokenId);\\n\\n        return\\n            bytes(baseURI).length > 0\\n                ? string(\\n                    abi.encodePacked(\\n                        baseURI,\\n                        x.toString(),\\n                        \\\"x\\\",\\n                        y.toString(),\\n                        URISuffix\\n                    )\\n                )\\n                : \\\"\\\";\\n    }\\n\\n    /**\\n     * Mints a new NFT\\n     *\\n     * @param _tokenId token ID to mint\\n     * @param _sig EIP712 signature to validate\\n     */\\n    function redeem(uint256 _tokenId, bytes calldata _sig) external {\\n        require(inBoundaries(_tokenId), \\\"not inside the grid\\\");\\n\\n        require(_verify(_hash(_msgSender(), _tokenId), _sig), \\\"invalid sig\\\");\\n        _safeMint(_msgSender(), _tokenId);\\n    }\\n\\n    function inBoundaries(uint256 _tokenId) public view returns (bool) {\\n        (uint16 x, uint16 y) = idToCoords(_tokenId);\\n\\n        return (x < width && y < height);\\n    }\\n\\n    function _inBoundaries(uint256 _tokenId) internal view returns (bool) {\\n        (uint16 x, uint16 y) = idToCoords(_tokenId);\\n\\n        return (x < width && y < height);\\n    }\\n\\n    /**\\n     * Mints a new NFT on behalf of an account\\n     *\\n     * @notice Only callable by an approved operator\\n     *\\n     * @param _to Address of the recipient\\n     * @param _tokenId token ID to mint\\n     */\\n    function redeemFor(address _to, uint256 _tokenId) external onlyOwner {\\n        _safeMint(_to, _tokenId);\\n    }\\n\\n    //\\n    // ERC721\\n    //\\n    function _baseURI() internal view returns (string memory) {\\n        return baseURI;\\n    }\\n\\n    //\\n    // Internal API\\n    //\\n\\n    function _getTokenData(uint256 _id) internal view returns (Data memory) {\\n        if (_exists(_id)) {\\n            return Data(_id, ownerOf[_id], tokenURI(_id));\\n        } else {\\n            return Data(0, address(0), \\\"\\\");\\n        }\\n    }\\n\\n    function _exists(uint256 _id) internal view returns (bool) {\\n        return ownerOf[_id] != address(0);\\n    }\\n\\n    /**\\n     * Computes the EIP712 Hash of a mint authorization\\n     *\\n     * @param _account Account who will mint the NFT\\n     * @param _tokenId ID of token to mint\\n     * @return The resulting EIP712 Hash\\n     */\\n    function _hash(address _account, uint256 _tokenId)\\n        internal\\n        view\\n        returns (bytes32)\\n    {\\n        return\\n            _hashTypedDataV4(\\n                keccak256(abi.encode(MINT_TYPEHASH, _account, _tokenId))\\n            );\\n    }\\n\\n    /**\\n     * Verifies a mint approval\\n     *\\n     * @param _digest The EIP712 hash digest\\n     * @param _sig The signature to check\\n     * @return true if the signature matches the hash, and corresponds to a valid minter role\\n     */\\n    function _verify(bytes32 _digest, bytes memory _sig)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return owner() == _digest.recover(_sig);\\n    }\\n\\n    function recover(\\n        address addr,\\n        uint256 _tokenId,\\n        bytes calldata _sig\\n    ) external view returns (address) {\\n        return ECDSA.recover(_hash(addr, _tokenId), _sig);\\n    }\\n}\\n\",\"keccak256\":\"0x59714b9b57730d65d7f3685416ae45a47cad7fb45df7f7aaf60e0b808f9494d5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101406040523480156200001257600080fd5b506040516200250b3803806200250b83398101604081905262000035916200040c565b86604051806040016040528060058152602001640312e302e360dc1b815250888881600090805190602001906200006e9291906200025c565b508051620000849060019060208401906200025c565b505050620000a16200009b6200020660201b60201c565b6200020a565b815160209283012081519183019190912060e08290526101008190524660a0818152604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818801819052818301969096526060810194909452608080850193909352308483018190528151808603909301835260c094850190915281519190950120905291909152610120526200013b816200020a565b8451620001509060079060208801906200025c565b508351620001669060089060208701906200025c565b506009805461ffff848116620100000263ffffffff19909216908616171790556040517f6741b2fc379fad678116fe3d4d4b9a1a184ab53ba36b86ad0fa66340b1ab41ad90620001b8908790620004fd565b60405180910390a17f80ee62268f37acfc25ec039b3bdc164eb560c675d21e677b7452e1f34a56897a84604051620001f19190620004fd565b60405180910390a1505050505050506200056f565b3390565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b8280546200026a9062000532565b90600052602060002090601f0160209004810192826200028e5760008555620002d9565b82601f10620002a957805160ff1916838001178555620002d9565b82800160010185558215620002d9579182015b82811115620002d9578251825591602001919060010190620002bc565b50620002e7929150620002eb565b5090565b5b80821115620002e75760008155600101620002ec565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620003355781810151838201526020016200031b565b8381111562000345576000848401525b50505050565b600082601f8301126200035d57600080fd5b81516001600160401b03808211156200037a576200037a62000302565b604051601f8301601f19908116603f01168101908282118183101715620003a557620003a562000302565b81604052838152866020858801011115620003bf57600080fd5b620003d284602083016020890162000318565b9695505050505050565b805161ffff81168114620003ef57600080fd5b919050565b80516001600160a01b0381168114620003ef57600080fd5b600080600080600080600060e0888a0312156200042857600080fd5b87516001600160401b03808211156200044057600080fd5b6200044e8b838c016200034b565b985060208a01519150808211156200046557600080fd5b620004738b838c016200034b565b975060408a01519150808211156200048a57600080fd5b620004988b838c016200034b565b965060608a0151915080821115620004af57600080fd5b50620004be8a828b016200034b565b945050620004cf60808901620003dc565b9250620004df60a08901620003dc565b9150620004ef60c08901620003f4565b905092959891949750929550565b60208152600082518060208401526200051e81604085016020870162000318565b601f01601f19169190910160400192915050565b600181811c908216806200054757607f821691505b602082108114156200056957634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e0516101005161012051611f4c620005bf600039600061150e0152600061155d0152600061153801526000611491015260006114bb015260006114e50152611f4c6000f3fe608060405234801561001057600080fd5b506004361061016a5760003560e01c806301dacdbe1461016f57806301ffc9a7146101ad57806306fdde03146101d0578063081812fc146101e5578063095ea7b3146102265780630ef267431461023b578063101b0fbc1461026257806323b872dd1461026a57806342842e0e1461027d57806355f804b3146102905780636352211e146102a35780636c0360eb146102cc57806370a08231146102d4578063715018a6146103025780637a82a1981461030a57806381b3e5751461031d5780638da5cb5b146103305780638f6b33111461033857806395d89b411461034b5780639ededf7714610353578063a22cb46514610361578063b4b5b48f14610374578063b88d4fde14610394578063c18b9e00146103a7578063c87b56dd146103ba578063e77c646d146103cd578063e985e9c5146103e0578063ed5dbebf1461040e578063f2fde38b14610421578063f76fc35e14610434575b600080fd5b61018d61017d366004611780565b601081901c916201ffff90911690565b6040805161ffff9384168152929091166020830152015b60405180910390f35b6101c06101bb3660046117af565b61045b565b60405190151581526020016101a4565b6101d86104ad565b6040516101a49190611824565b61020e6101f3366004611780565b6004602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020016101a4565b61023961023436600461184e565b61053b565b005b60095461024f9062010000900461ffff1681565b60405161ffff90911681526020016101a4565b6101d8610605565b610239610278366004611878565b610612565b61023961028b366004611878565b610794565b61023961029e36600461193f565b610853565b61020e6102b1366004611780565b6003602052600090815260409020546001600160a01b031681565b6101d86108d0565b6102f46102e2366004611987565b60026020526000908152604090205481565b6040519081526020016101a4565b6102396108dd565b61023961031836600461184e565b610918565b61023961032b36600461193f565b610955565b61020e6109c7565b61020e6103463660046119e3565b6109d6565b6101d8610a2a565b60095461024f9061ffff1681565b61023961036f366004611a3c565b610a37565b610387610382366004611780565b610aa3565b6040516101a49190611a78565b6102396103a2366004611aaf565b610ab4565b6102f46103b5366004611b3c565b610b76565b6101d86103c8366004611780565b610b97565b6102396103db366004611b6f565b610c1c565b6101c06103ee366004611bba565b600560209081526000928352604080842090915290825290205460ff1681565b6101c061041c366004611780565b610cf4565b61023961042f366004611987565b610d31565b6102f47f53830f36ae1afd5a27cb5c733cbb7d8e37f4180a90f2238fd1fc48909235dac781565b60006301ffc9a760e01b6001600160e01b03198316148061048c57506380ac58cd60e01b6001600160e01b03198316145b806104a75750635b5e139f60e01b6001600160e01b03198316145b92915050565b600080546104ba90611be4565b80601f01602080910402602001604051908101604052809291908181526020018280546104e690611be4565b80156105335780601f1061050857610100808354040283529160200191610533565b820191906000526020600020905b81548152906001019060200180831161051657829003601f168201915b505050505081565b6000818152600360205260409020546001600160a01b03163381148061058457506001600160a01b038116600090815260056020908152604080832033845290915290205460ff165b6105a95760405162461bcd60e51b81526004016105a090611c1f565b60405180910390fd5b60008281526004602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b600880546104ba90611be4565b6000818152600360205260409020546001600160a01b038481169116146106685760405162461bcd60e51b815260206004820152600a60248201526957524f4e475f46524f4d60b01b60448201526064016105a0565b6001600160a01b03821661068e5760405162461bcd60e51b81526004016105a090611c47565b336001600160a01b03841614806106bb57506000818152600460205260409020546001600160a01b031633145b806106e957506001600160a01b038316600090815260056020908152604080832033845290915290205460ff165b6107055760405162461bcd60e51b81526004016105a090611c1f565b6001600160a01b0380841660008181526002602090815260408083208054600019019055938616808352848320805460010190558583526003825284832080546001600160a01b03199081168317909155600490925284832080549092169091559251849392917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b61079f838383610612565b6001600160a01b0382163b15806108325750604051630a85bd0160e11b808252906001600160a01b0384169063150b7a02906107e390339088908790600401611c72565b6020604051808303816000875af1158015610802573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108269190611ca5565b6001600160e01b031916145b61084e5760405162461bcd60e51b81526004016105a090611cc2565b505050565b3361085c6109c7565b6001600160a01b0316146108825760405162461bcd60e51b81526004016105a090611cec565b80516108959060079060208401906116bd565b507f6741b2fc379fad678116fe3d4d4b9a1a184ab53ba36b86ad0fa66340b1ab41ad816040516108c59190611824565b60405180910390a150565b600780546104ba90611be4565b336108e66109c7565b6001600160a01b03161461090c5760405162461bcd60e51b81526004016105a090611cec565b6109166000610dd1565b565b336109216109c7565b6001600160a01b0316146109475760405162461bcd60e51b81526004016105a090611cec565b6109518282610e23565b5050565b3361095e6109c7565b6001600160a01b0316146109845760405162461bcd60e51b81526004016105a090611cec565b80516109979060089060208401906116bd565b507f80ee62268f37acfc25ec039b3bdc164eb560c675d21e677b7452e1f34a56897a816040516108c59190611824565b6006546001600160a01b031690565b6000610a216109e58686610edd565b84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610f4492505050565b95945050505050565b600180546104ba90611be4565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b610aab611741565b6104a782610f68565b610abf848484610612565b6001600160a01b0383163b1580610b545750604051630a85bd0160e11b808252906001600160a01b0385169063150b7a0290610b05903390899088908890600401611d21565b6020604051808303816000875af1158015610b24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b489190611ca5565b6001600160e01b031916145b610b705760405162461bcd60e51b81526004016105a090611cc2565b50505050565b6000610b9061ffff831663ffff0000601086901b16611d74565b9392505050565b60078054606091601084901c916201ffff851691600091610bb790611be4565b905011610bd35760405180602001604052806000815250610c14565b6007610be28361ffff16610ffe565b610bef8361ffff16610ffe565b6008604051602001610c049493929190611e26565b6040516020818303038152906040525b949350505050565b610c2583610cf4565b610c675760405162461bcd60e51b81526020600482015260136024820152721b9bdd081a5b9cda5919481d1a194819dc9a59606a1b60448201526064016105a0565b610cb0610c743385610edd565b83838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506110fb92505050565b610cea5760405162461bcd60e51b815260206004820152600b60248201526a696e76616c69642073696760a81b60448201526064016105a0565b61084e3384610e23565b600954600090601083901c906201ffff84169061ffff908116908316108015610c14575060095462010000900461ffff9081169116109392505050565b33610d3a6109c7565b6001600160a01b031614610d605760405162461bcd60e51b81526004016105a090611cec565b6001600160a01b038116610dc55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105a0565b610dce81610dd1565b50565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b610e2d8282611129565b6001600160a01b0382163b1580610ec15750604051630a85bd0160e11b808252906001600160a01b0384169063150b7a0290610e729033906000908790600401611c72565b6020604051808303816000875af1158015610e91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb59190611ca5565b6001600160e01b031916145b6109515760405162461bcd60e51b81526004016105a090611cc2565b604080517f53830f36ae1afd5a27cb5c733cbb7d8e37f4180a90f2238fd1fc48909235dac760208201526001600160a01b0384169181019190915260608101829052600090610b909060800160405160208183030381529060405280519060200120611210565b6000806000610f53858561125e565b91509150610f60816112ce565b509392505050565b610f70611741565b6000828152600360205260409020546001600160a01b031615610fcc576040805160608101825283815260008481526003602090815290839020546001600160a01b031690820152908101610fc484610b97565b905292915050565b50506040805160608101825260008082526020808301829052835190810184529081529181019190915290565b919050565b6060816110225750506040805180820190915260018152600360fc1b602082015290565b8160005b811561104c578061103681611e7a565b91506110459050600a83611eab565b9150611026565b6000816001600160401b03811115611066576110666118b4565b6040519080825280601f01601f191660200182016040528015611090576020820181803683370190505b5090505b8415610c14576110a5600183611ebf565b91506110b2600a86611ed6565b6110bd906030611d74565b60f81b8183815181106110d2576110d2611eea565b60200101906001600160f81b031916908160001a9053506110f4600a86611eab565b9450611094565b60006111078383610f44565b6001600160a01b03166111186109c7565b6001600160a01b0316149392505050565b6001600160a01b03821661114f5760405162461bcd60e51b81526004016105a090611c47565b6000818152600360205260409020546001600160a01b0316156111a55760405162461bcd60e51b815260206004820152600e60248201526d1053149150511657d3525395115160921b60448201526064016105a0565b6001600160a01b038216600081815260026020908152604080832080546001019055848352600390915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006104a761121d611484565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b6000808251604114156112955760208301516040840151606085015160001a611289878285856115ab565b945094505050506112c7565b8251604014156112bf57602083015160408401516112b486838361168e565b9350935050506112c7565b506000905060025b9250929050565b60008160048111156112e2576112e2611f00565b14156112eb5750565b60018160048111156112ff576112ff611f00565b14156113485760405162461bcd60e51b815260206004820152601860248201527745434453413a20696e76616c6964207369676e617475726560401b60448201526064016105a0565b600281600481111561135c5761135c611f00565b14156113aa5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016105a0565b60038160048111156113be576113be611f00565b14156114175760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016105a0565b600481600481111561142b5761142b611f00565b1415610dce5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b60648201526084016105a0565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480156114dd57507f000000000000000000000000000000000000000000000000000000000000000046145b1561150757507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b6000806fa2a8918ca85bafe22016d0b997e4df60600160ff1b038311156115d85750600090506003611685565b8460ff16601b141580156115f057508460ff16601c14155b156116015750600090506004611685565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611655573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661167e57600060019250925050611685565b9150600090505b94509492505050565b6000806001600160ff1b03831660ff84901c601b016116af878288856115ab565b935093505050935093915050565b8280546116c990611be4565b90600052602060002090601f0160209004810192826116eb5760008555611731565b82601f1061170457805160ff1916838001178555611731565b82800160010185558215611731579182015b82811115611731578251825591602001919060010190611716565b5061173d92915061176b565b5090565b60405180606001604052806000815260200160006001600160a01b03168152602001606081525090565b5b8082111561173d576000815560010161176c565b60006020828403121561179257600080fd5b5035919050565b6001600160e01b031981168114610dce57600080fd5b6000602082840312156117c157600080fd5b8135610b9081611799565b60005b838110156117e75781810151838201526020016117cf565b83811115610b705750506000910152565b600081518084526118108160208601602086016117cc565b601f01601f19169290920160200192915050565b602081526000610b9060208301846117f8565b80356001600160a01b0381168114610ff957600080fd5b6000806040838503121561186157600080fd5b61186a83611837565b946020939093013593505050565b60008060006060848603121561188d57600080fd5b61189684611837565b92506118a460208501611837565b9150604084013590509250925092565b634e487b7160e01b600052604160045260246000fd5b60006001600160401b03808411156118e4576118e46118b4565b604051601f8501601f19908116603f0116810190828211818310171561190c5761190c6118b4565b8160405280935085815286868601111561192557600080fd5b858560208301376000602087830101525050509392505050565b60006020828403121561195157600080fd5b81356001600160401b0381111561196757600080fd5b8201601f8101841361197857600080fd5b610c14848235602084016118ca565b60006020828403121561199957600080fd5b610b9082611837565b60008083601f8401126119b457600080fd5b5081356001600160401b038111156119cb57600080fd5b6020830191508360208285010111156112c757600080fd5b600080600080606085870312156119f957600080fd5b611a0285611837565b93506020850135925060408501356001600160401b03811115611a2457600080fd5b611a30878288016119a2565b95989497509550505050565b60008060408385031215611a4f57600080fd5b611a5883611837565b915060208301358015158114611a6d57600080fd5b809150509250929050565b602081528151602082015260018060a01b03602083015116604082015260006040830151606080840152610c1460808401826117f8565b60008060008060808587031215611ac557600080fd5b611ace85611837565b9350611adc60208601611837565b92506040850135915060608501356001600160401b03811115611afe57600080fd5b8501601f81018713611b0f57600080fd5b611b1e878235602084016118ca565b91505092959194509250565b803561ffff81168114610ff957600080fd5b60008060408385031215611b4f57600080fd5b611b5883611b2a565b9150611b6660208401611b2a565b90509250929050565b600080600060408486031215611b8457600080fd5b8335925060208401356001600160401b03811115611ba157600080fd5b611bad868287016119a2565b9497909650939450505050565b60008060408385031215611bcd57600080fd5b611bd683611837565b9150611b6660208401611837565b600181811c90821680611bf857607f821691505b60208210811415611c1957634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252600e908201526d1393d517d055551213d49256915160921b604082015260600190565b6020808252601190820152701253959053125117d49150d25412515395607a1b604082015260600190565b6001600160a01b039384168152919092166020820152604081019190915260806060820181905260009082015260a00190565b600060208284031215611cb757600080fd5b8151610b9081611799565b60208082526010908201526f155394d0519157d49150d2541251539560821b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611d54908301846117f8565b9695505050505050565b634e487b7160e01b600052601160045260246000fd5b60008219821115611d8757611d87611d5e565b500190565b8054600090600181811c9080831680611da657607f831692505b6020808410821415611dc857634e487b7160e01b600052602260045260246000fd5b818015611ddc5760018114611ded57611e1a565b60ff19861689528489019650611e1a565b60008881526020902060005b86811015611e125781548b820152908501908301611df9565b505084890196505b50505050505092915050565b6000611e328287611d8c565b8551611e42818360208a016117cc565b600f60fb1b91019081528451611e5f8160018401602089016117cc565b611e6e60018284010186611d8c565b98975050505050505050565b6000600019821415611e8e57611e8e611d5e565b5060010190565b634e487b7160e01b600052601260045260246000fd5b600082611eba57611eba611e95565b500490565b600082821015611ed157611ed1611d5e565b500390565b600082611ee557611ee5611e95565b500690565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052602160045260246000fdfea2646970667358221220a61210ec5cacb6bed9b4e5ac677d7600985842019030ed424a3c07e77b593abd64736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061016a5760003560e01c806301dacdbe1461016f57806301ffc9a7146101ad57806306fdde03146101d0578063081812fc146101e5578063095ea7b3146102265780630ef267431461023b578063101b0fbc1461026257806323b872dd1461026a57806342842e0e1461027d57806355f804b3146102905780636352211e146102a35780636c0360eb146102cc57806370a08231146102d4578063715018a6146103025780637a82a1981461030a57806381b3e5751461031d5780638da5cb5b146103305780638f6b33111461033857806395d89b411461034b5780639ededf7714610353578063a22cb46514610361578063b4b5b48f14610374578063b88d4fde14610394578063c18b9e00146103a7578063c87b56dd146103ba578063e77c646d146103cd578063e985e9c5146103e0578063ed5dbebf1461040e578063f2fde38b14610421578063f76fc35e14610434575b600080fd5b61018d61017d366004611780565b601081901c916201ffff90911690565b6040805161ffff9384168152929091166020830152015b60405180910390f35b6101c06101bb3660046117af565b61045b565b60405190151581526020016101a4565b6101d86104ad565b6040516101a49190611824565b61020e6101f3366004611780565b6004602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020016101a4565b61023961023436600461184e565b61053b565b005b60095461024f9062010000900461ffff1681565b60405161ffff90911681526020016101a4565b6101d8610605565b610239610278366004611878565b610612565b61023961028b366004611878565b610794565b61023961029e36600461193f565b610853565b61020e6102b1366004611780565b6003602052600090815260409020546001600160a01b031681565b6101d86108d0565b6102f46102e2366004611987565b60026020526000908152604090205481565b6040519081526020016101a4565b6102396108dd565b61023961031836600461184e565b610918565b61023961032b36600461193f565b610955565b61020e6109c7565b61020e6103463660046119e3565b6109d6565b6101d8610a2a565b60095461024f9061ffff1681565b61023961036f366004611a3c565b610a37565b610387610382366004611780565b610aa3565b6040516101a49190611a78565b6102396103a2366004611aaf565b610ab4565b6102f46103b5366004611b3c565b610b76565b6101d86103c8366004611780565b610b97565b6102396103db366004611b6f565b610c1c565b6101c06103ee366004611bba565b600560209081526000928352604080842090915290825290205460ff1681565b6101c061041c366004611780565b610cf4565b61023961042f366004611987565b610d31565b6102f47f53830f36ae1afd5a27cb5c733cbb7d8e37f4180a90f2238fd1fc48909235dac781565b60006301ffc9a760e01b6001600160e01b03198316148061048c57506380ac58cd60e01b6001600160e01b03198316145b806104a75750635b5e139f60e01b6001600160e01b03198316145b92915050565b600080546104ba90611be4565b80601f01602080910402602001604051908101604052809291908181526020018280546104e690611be4565b80156105335780601f1061050857610100808354040283529160200191610533565b820191906000526020600020905b81548152906001019060200180831161051657829003601f168201915b505050505081565b6000818152600360205260409020546001600160a01b03163381148061058457506001600160a01b038116600090815260056020908152604080832033845290915290205460ff165b6105a95760405162461bcd60e51b81526004016105a090611c1f565b60405180910390fd5b60008281526004602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b600880546104ba90611be4565b6000818152600360205260409020546001600160a01b038481169116146106685760405162461bcd60e51b815260206004820152600a60248201526957524f4e475f46524f4d60b01b60448201526064016105a0565b6001600160a01b03821661068e5760405162461bcd60e51b81526004016105a090611c47565b336001600160a01b03841614806106bb57506000818152600460205260409020546001600160a01b031633145b806106e957506001600160a01b038316600090815260056020908152604080832033845290915290205460ff165b6107055760405162461bcd60e51b81526004016105a090611c1f565b6001600160a01b0380841660008181526002602090815260408083208054600019019055938616808352848320805460010190558583526003825284832080546001600160a01b03199081168317909155600490925284832080549092169091559251849392917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b61079f838383610612565b6001600160a01b0382163b15806108325750604051630a85bd0160e11b808252906001600160a01b0384169063150b7a02906107e390339088908790600401611c72565b6020604051808303816000875af1158015610802573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108269190611ca5565b6001600160e01b031916145b61084e5760405162461bcd60e51b81526004016105a090611cc2565b505050565b3361085c6109c7565b6001600160a01b0316146108825760405162461bcd60e51b81526004016105a090611cec565b80516108959060079060208401906116bd565b507f6741b2fc379fad678116fe3d4d4b9a1a184ab53ba36b86ad0fa66340b1ab41ad816040516108c59190611824565b60405180910390a150565b600780546104ba90611be4565b336108e66109c7565b6001600160a01b03161461090c5760405162461bcd60e51b81526004016105a090611cec565b6109166000610dd1565b565b336109216109c7565b6001600160a01b0316146109475760405162461bcd60e51b81526004016105a090611cec565b6109518282610e23565b5050565b3361095e6109c7565b6001600160a01b0316146109845760405162461bcd60e51b81526004016105a090611cec565b80516109979060089060208401906116bd565b507f80ee62268f37acfc25ec039b3bdc164eb560c675d21e677b7452e1f34a56897a816040516108c59190611824565b6006546001600160a01b031690565b6000610a216109e58686610edd565b84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610f4492505050565b95945050505050565b600180546104ba90611be4565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b610aab611741565b6104a782610f68565b610abf848484610612565b6001600160a01b0383163b1580610b545750604051630a85bd0160e11b808252906001600160a01b0385169063150b7a0290610b05903390899088908890600401611d21565b6020604051808303816000875af1158015610b24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b489190611ca5565b6001600160e01b031916145b610b705760405162461bcd60e51b81526004016105a090611cc2565b50505050565b6000610b9061ffff831663ffff0000601086901b16611d74565b9392505050565b60078054606091601084901c916201ffff851691600091610bb790611be4565b905011610bd35760405180602001604052806000815250610c14565b6007610be28361ffff16610ffe565b610bef8361ffff16610ffe565b6008604051602001610c049493929190611e26565b6040516020818303038152906040525b949350505050565b610c2583610cf4565b610c675760405162461bcd60e51b81526020600482015260136024820152721b9bdd081a5b9cda5919481d1a194819dc9a59606a1b60448201526064016105a0565b610cb0610c743385610edd565b83838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506110fb92505050565b610cea5760405162461bcd60e51b815260206004820152600b60248201526a696e76616c69642073696760a81b60448201526064016105a0565b61084e3384610e23565b600954600090601083901c906201ffff84169061ffff908116908316108015610c14575060095462010000900461ffff9081169116109392505050565b33610d3a6109c7565b6001600160a01b031614610d605760405162461bcd60e51b81526004016105a090611cec565b6001600160a01b038116610dc55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105a0565b610dce81610dd1565b50565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b610e2d8282611129565b6001600160a01b0382163b1580610ec15750604051630a85bd0160e11b808252906001600160a01b0384169063150b7a0290610e729033906000908790600401611c72565b6020604051808303816000875af1158015610e91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb59190611ca5565b6001600160e01b031916145b6109515760405162461bcd60e51b81526004016105a090611cc2565b604080517f53830f36ae1afd5a27cb5c733cbb7d8e37f4180a90f2238fd1fc48909235dac760208201526001600160a01b0384169181019190915260608101829052600090610b909060800160405160208183030381529060405280519060200120611210565b6000806000610f53858561125e565b91509150610f60816112ce565b509392505050565b610f70611741565b6000828152600360205260409020546001600160a01b031615610fcc576040805160608101825283815260008481526003602090815290839020546001600160a01b031690820152908101610fc484610b97565b905292915050565b50506040805160608101825260008082526020808301829052835190810184529081529181019190915290565b919050565b6060816110225750506040805180820190915260018152600360fc1b602082015290565b8160005b811561104c578061103681611e7a565b91506110459050600a83611eab565b9150611026565b6000816001600160401b03811115611066576110666118b4565b6040519080825280601f01601f191660200182016040528015611090576020820181803683370190505b5090505b8415610c14576110a5600183611ebf565b91506110b2600a86611ed6565b6110bd906030611d74565b60f81b8183815181106110d2576110d2611eea565b60200101906001600160f81b031916908160001a9053506110f4600a86611eab565b9450611094565b60006111078383610f44565b6001600160a01b03166111186109c7565b6001600160a01b0316149392505050565b6001600160a01b03821661114f5760405162461bcd60e51b81526004016105a090611c47565b6000818152600360205260409020546001600160a01b0316156111a55760405162461bcd60e51b815260206004820152600e60248201526d1053149150511657d3525395115160921b60448201526064016105a0565b6001600160a01b038216600081815260026020908152604080832080546001019055848352600390915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006104a761121d611484565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b6000808251604114156112955760208301516040840151606085015160001a611289878285856115ab565b945094505050506112c7565b8251604014156112bf57602083015160408401516112b486838361168e565b9350935050506112c7565b506000905060025b9250929050565b60008160048111156112e2576112e2611f00565b14156112eb5750565b60018160048111156112ff576112ff611f00565b14156113485760405162461bcd60e51b815260206004820152601860248201527745434453413a20696e76616c6964207369676e617475726560401b60448201526064016105a0565b600281600481111561135c5761135c611f00565b14156113aa5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016105a0565b60038160048111156113be576113be611f00565b14156114175760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016105a0565b600481600481111561142b5761142b611f00565b1415610dce5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b60648201526084016105a0565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480156114dd57507f000000000000000000000000000000000000000000000000000000000000000046145b1561150757507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b6000806fa2a8918ca85bafe22016d0b997e4df60600160ff1b038311156115d85750600090506003611685565b8460ff16601b141580156115f057508460ff16601c14155b156116015750600090506004611685565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611655573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661167e57600060019250925050611685565b9150600090505b94509492505050565b6000806001600160ff1b03831660ff84901c601b016116af878288856115ab565b935093505050935093915050565b8280546116c990611be4565b90600052602060002090601f0160209004810192826116eb5760008555611731565b82601f1061170457805160ff1916838001178555611731565b82800160010185558215611731579182015b82811115611731578251825591602001919060010190611716565b5061173d92915061176b565b5090565b60405180606001604052806000815260200160006001600160a01b03168152602001606081525090565b5b8082111561173d576000815560010161176c565b60006020828403121561179257600080fd5b5035919050565b6001600160e01b031981168114610dce57600080fd5b6000602082840312156117c157600080fd5b8135610b9081611799565b60005b838110156117e75781810151838201526020016117cf565b83811115610b705750506000910152565b600081518084526118108160208601602086016117cc565b601f01601f19169290920160200192915050565b602081526000610b9060208301846117f8565b80356001600160a01b0381168114610ff957600080fd5b6000806040838503121561186157600080fd5b61186a83611837565b946020939093013593505050565b60008060006060848603121561188d57600080fd5b61189684611837565b92506118a460208501611837565b9150604084013590509250925092565b634e487b7160e01b600052604160045260246000fd5b60006001600160401b03808411156118e4576118e46118b4565b604051601f8501601f19908116603f0116810190828211818310171561190c5761190c6118b4565b8160405280935085815286868601111561192557600080fd5b858560208301376000602087830101525050509392505050565b60006020828403121561195157600080fd5b81356001600160401b0381111561196757600080fd5b8201601f8101841361197857600080fd5b610c14848235602084016118ca565b60006020828403121561199957600080fd5b610b9082611837565b60008083601f8401126119b457600080fd5b5081356001600160401b038111156119cb57600080fd5b6020830191508360208285010111156112c757600080fd5b600080600080606085870312156119f957600080fd5b611a0285611837565b93506020850135925060408501356001600160401b03811115611a2457600080fd5b611a30878288016119a2565b95989497509550505050565b60008060408385031215611a4f57600080fd5b611a5883611837565b915060208301358015158114611a6d57600080fd5b809150509250929050565b602081528151602082015260018060a01b03602083015116604082015260006040830151606080840152610c1460808401826117f8565b60008060008060808587031215611ac557600080fd5b611ace85611837565b9350611adc60208601611837565b92506040850135915060608501356001600160401b03811115611afe57600080fd5b8501601f81018713611b0f57600080fd5b611b1e878235602084016118ca565b91505092959194509250565b803561ffff81168114610ff957600080fd5b60008060408385031215611b4f57600080fd5b611b5883611b2a565b9150611b6660208401611b2a565b90509250929050565b600080600060408486031215611b8457600080fd5b8335925060208401356001600160401b03811115611ba157600080fd5b611bad868287016119a2565b9497909650939450505050565b60008060408385031215611bcd57600080fd5b611bd683611837565b9150611b6660208401611837565b600181811c90821680611bf857607f821691505b60208210811415611c1957634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252600e908201526d1393d517d055551213d49256915160921b604082015260600190565b6020808252601190820152701253959053125117d49150d25412515395607a1b604082015260600190565b6001600160a01b039384168152919092166020820152604081019190915260806060820181905260009082015260a00190565b600060208284031215611cb757600080fd5b8151610b9081611799565b60208082526010908201526f155394d0519157d49150d2541251539560821b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611d54908301846117f8565b9695505050505050565b634e487b7160e01b600052601160045260246000fd5b60008219821115611d8757611d87611d5e565b500190565b8054600090600181811c9080831680611da657607f831692505b6020808410821415611dc857634e487b7160e01b600052602260045260246000fd5b818015611ddc5760018114611ded57611e1a565b60ff19861689528489019650611e1a565b60008881526020902060005b86811015611e125781548b820152908501908301611df9565b505084890196505b50505050505092915050565b6000611e328287611d8c565b8551611e42818360208a016117cc565b600f60fb1b91019081528451611e5f8160018401602089016117cc565b611e6e60018284010186611d8c565b98975050505050505050565b6000600019821415611e8e57611e8e611d5e565b5060010190565b634e487b7160e01b600052601260045260246000fd5b600082611eba57611eba611e95565b500490565b600082821015611ed157611ed1611d5e565b500390565b600082611ee557611ee5611e95565b500690565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052602160045260246000fdfea2646970667358221220a61210ec5cacb6bed9b4e5ac677d7600985842019030ed424a3c07e77b593abd64736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_name": "NFT name",
          "_newBaseURI": "base URI to use for assets",
          "_newURISuffix": "URI suffix to use for assets",
          "_symbol": "NFT symbol"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "redeem(uint256,bytes)": {
        "params": {
          "_sig": "EIP712 signature to validate",
          "_tokenId": "token ID to mint"
        }
      },
      "redeemFor(address,uint256)": {
        "params": {
          "_to": "Address of the recipient",
          "_tokenId": "token ID to mint"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setBaseURI(string)": {
        "params": {
          "_newBaseURI": "new base URI for the token"
        }
      },
      "setURISuffix(string)": {
        "params": {
          "_newURISuffix": "new URI suffix for the token"
        }
      },
      "tokenData(uint256)": {
        "params": {
          "tokenId": "the token ID"
        },
        "returns": {
          "_0": "token data"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "BaseURIUpdated(string)": {
        "notice": "Emitted when the base URI changes"
      },
      "URISuffixUpdated(string)": {
        "notice": "Emitted when the URI suffix changes"
      }
    },
    "kind": "user",
    "methods": {
      "URISuffix()": {
        "notice": "Suffix for the URI of all NFTs;"
      },
      "baseURI()": {
        "notice": "Base URI for all NFTs"
      },
      "redeem(uint256,bytes)": {
        "notice": "Mints a new NFT"
      },
      "redeemFor(address,uint256)": {
        "notice": "Mints a new NFT on behalf of an accountOnly callable by an approved operator"
      },
      "setBaseURI(string)": {
        "notice": "Updates the base URIOnly callable by an authorized operator"
      },
      "setURISuffix(string)": {
        "notice": "Updates the URI suffixOnly callable by an authorized operator"
      },
      "tokenData(uint256)": {
        "notice": "Returns info for a token based on his ID"
      }
    },
    "notice": "An NFT representing the Subvisual Universe",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 902,
        "contract": "contracts/SubvisualUniverseNFT.sol:SubvisualUniverseNFT",
        "label": "name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 904,
        "contract": "contracts/SubvisualUniverseNFT.sol:SubvisualUniverseNFT",
        "label": "symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 915,
        "contract": "contracts/SubvisualUniverseNFT.sol:SubvisualUniverseNFT",
        "label": "balanceOf",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 919,
        "contract": "contracts/SubvisualUniverseNFT.sol:SubvisualUniverseNFT",
        "label": "ownerOf",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 923,
        "contract": "contracts/SubvisualUniverseNFT.sol:SubvisualUniverseNFT",
        "label": "getApproved",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 929,
        "contract": "contracts/SubvisualUniverseNFT.sol:SubvisualUniverseNFT",
        "label": "isApprovedForAll",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 7,
        "contract": "contracts/SubvisualUniverseNFT.sol:SubvisualUniverseNFT",
        "label": "_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 1429,
        "contract": "contracts/SubvisualUniverseNFT.sol:SubvisualUniverseNFT",
        "label": "baseURI",
        "offset": 0,
        "slot": "7",
        "type": "t_string_storage"
      },
      {
        "astId": 1432,
        "contract": "contracts/SubvisualUniverseNFT.sol:SubvisualUniverseNFT",
        "label": "URISuffix",
        "offset": 0,
        "slot": "8",
        "type": "t_string_storage"
      },
      {
        "astId": 1434,
        "contract": "contracts/SubvisualUniverseNFT.sol:SubvisualUniverseNFT",
        "label": "width",
        "offset": 0,
        "slot": "9",
        "type": "t_uint16"
      },
      {
        "astId": 1436,
        "contract": "contracts/SubvisualUniverseNFT.sol:SubvisualUniverseNFT",
        "label": "height",
        "offset": 2,
        "slot": "9",
        "type": "t_uint16"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}